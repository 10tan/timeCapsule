{"ast":null,"code":"var _jsxFileName = \"/home/tanmay-kumar/Desktop/clone-2/TimeCapsule2.0/timeCapsule/src/Dashboard/Timer.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n// import \"./CountdownTimer.css\";\n// import axios from \"axios\"\n// import { useNavigate } from \"react-router-dom\";\n// export default function CountdownTimer({initialTime, isDarkMode }) {\n//   const [time, setTime] = useState(0);\n//   const [isRunning, setIsRunning] = useState(true);\n//   //const [inputTime, setInputTime] = useState(\"\");\n//   const navigate = useNavigate();\n//   useEffect(() => {\n//     let interval;\n//     if (isRunning && time > 0) {\n//       interval = setInterval(() => {\n//         setTime((prevTime) => prevTime - 1);\n//       }, 1000);\n//     } else {\n//       clearInterval(interval);\n//       if (isRunning && time === 0) {\n//         // Timer reached zero, send email\n//         const sendEmail = async () => {\n//           try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.post(\n//               \"http://localhost:5000/api/email/send-email\",\n//               {},\n//               {\n//                 headers: {\n//                   Authorization: `Bearer ${token}`,\n//                 },\n//               }\n//             );\n//             console.log(\"Email sent successfully!\");\n//           } catch (error) {\n//             console.error(\"Error sending email:\", error);\n//             if(error.response && error.response.data && error.response.data.error){\n//                 console.error(\"Server error message:\", error.response.data.error);\n//             }\n//           }\n//         };\n//         sendEmail();\n//         setIsRunning(false);\n//         navigate(\"/user-photos\"); // Stop the timer\n//       }\n//     }\n//     return () => clearInterval(interval);\n//   }, [isRunning, time,navigate]);\n//   useEffect(() => {\n//     if (initialTime > 0) { // Only reset if initialTime is greater than 0\n//         setTime(initialTime);\n//         setIsRunning(true);\n//     }\n// }, [initialTime]);\n\n//   const formatTime = (seconds) => {\n//     const years = Math.floor(seconds / 31536000);\n//     const months = Math.floor((seconds % 31536000) / 2592000);\n//     const days = Math.floor((seconds % 2592000) / 86400);\n//     const hours = Math.floor((seconds % 86400) / 3600);\n//     const minutes = Math.floor((seconds % 3600) / 60);\n//     const remainingSeconds = seconds % 60;\n\n//     if (years > 0) return `${years}y ${months}m`;\n//     if (months > 0) return `${months}m ${days}d`;\n//     if (days > 0) return `${days}d ${hours}h`;\n//     if (hours > 0) return `${hours}h ${minutes}m`;\n//     return `${minutes}m ${remainingSeconds}s`;\n//   };\n\n//   /*const handleStart = () => {\n//     const seconds = parseInt(inputTime, 10);\n//     if (!isNaN(seconds) && seconds > 0) {\n//       setTime(seconds);\n//       setIsRunning(true);\n//     }\n//   };*/\n\n//   return (\n//     <div className={isDarkMode ? \"dark-mode\" : \"light-mode\"}>\n//         <div className=\"timer\">{formatTime(time)}</div>\n//         <div className=\"button-container\">\n//             <button onClick={() => setIsRunning(false)} className=\"button\">\n//                 Stop\n//             </button>\n//             <button\n//                 onClick={() => {\n//                     setTime(initialTime); // Reset to initialTime\n//                     setIsRunning(true);\n//                 }}\n//                 className=\"button\"\n//             >\n//                 Reset\n//             </button>\n//         </div>\n//     </div>\n// );\n// }\n\n// import { useState, useEffect } from \"react\";\n// import { useNavigate, useLocation } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"./CountdownTimer.css\";\n\n// export default function CountdownTimer() {\n//     const navigate = useNavigate();\n//     const location = useLocation();\n//     const queryParams = new URLSearchParams(location.search);\n//     const initialTime = parseInt(queryParams.get(\"time\"), 10) || 0; // Read time from URL\n\n//     const [time, setTime] = useState(initialTime);\n//     const [isRunning, setIsRunning] = useState(true);\n\n//     useEffect(() => {\n//         let interval;\n//         if (isRunning && time > 0) {\n//             interval = setInterval(() => {\n//                 setTime((prevTime) => prevTime - 1);\n//             }, 1000);\n//         } else {\n//             clearInterval(interval);\n//             if (isRunning && time === 0) {\n//                 sendEmail();\n//                 setIsRunning(false);\n//                 navigate(\"/user-photos\"); // Redirect when timer ends\n//             }\n//         }\n//         return () => clearInterval(interval);\n//     }, [isRunning, time, navigate]);\n\n//     const sendEmail = async () => {\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.post(\n//                 \"http://localhost:5000/api/email/send-email\",\n//                 {},\n//                 {\n//                     headers: {\n//                         Authorization: `Bearer ${token}`,\n//                     },\n//                 }\n//             );\n//             console.log(\"Email sent successfully!\");\n//         } catch (error) {\n//             console.error(\"Error sending email:\", error);\n//         }\n//     };\n\n//     return (\n//         <div className=\"timer-container\">\n//             <div className=\"timer\">{time}s</div>\n//             <button onClick={() => setIsRunning(false)}>Stop</button>\n//             <button onClick={() => { setTime(initialTime); setIsRunning(true); }}>Reset</button>\n//         </div>\n//     );\n// }\n\nimport { useState, useEffect } from \"react\";\nimport \"./CountdownTimer.css\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CountdownTimer({\n  initialTime = 0,\n  isDarkMode\n}) {\n  _s();\n  const [time, setTime] = useState(initialTime);\n  const [isRunning, setIsRunning] = useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (initialTime > 0) {\n      setTime(initialTime); // Set time from props when component mounts\n      setIsRunning(true);\n    }\n  }, [initialTime]);\n  useEffect(() => {\n    let interval;\n    if (isRunning && time > 0) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime - 1);\n      }, 1000);\n    } else {\n      clearInterval(interval);\n      if (isRunning && time === 0) {\n        sendEmail(); // Send email when timer hits zero\n        setIsRunning(false);\n        navigate(\"/user-photos\"); // Redirect after timer ends\n      }\n    }\n    return () => clearInterval(interval);\n  }, [isRunning, time, navigate]);\n  const sendEmail = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      await axios.post(\"http://localhost:5000/api/email/send-email\", {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(\"Email sent successfully!\");\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n    }\n  };\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}m ${remainingSeconds}s`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: isDarkMode ? \"dark-mode\" : \"light-mode\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: formatTime(time)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsRunning(false),\n        className: \"button\",\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setTime(initialTime); // Reset to initial time\n          setIsRunning(true);\n        },\n        className: \"button\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 9\n  }, this);\n}\n_s(CountdownTimer, \"4xMOcka/M0QptwXx/6p2K5P5IBE=\", false, function () {\n  return [useNavigate];\n});\n_c = CountdownTimer;\nvar _c;\n$RefreshReg$(_c, \"CountdownTimer\");","map":{"version":3,"names":["useState","useEffect","axios","useNavigate","jsxDEV","_jsxDEV","CountdownTimer","initialTime","isDarkMode","_s","time","setTime","isRunning","setIsRunning","navigate","interval","setInterval","prevTime","clearInterval","sendEmail","token","localStorage","getItem","post","headers","Authorization","console","log","error","formatTime","seconds","minutes","Math","floor","remainingSeconds","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/tanmay-kumar/Desktop/clone-2/TimeCapsule2.0/timeCapsule/src/Dashboard/Timer.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n// import \"./CountdownTimer.css\";\n// import axios from \"axios\"\n// import { useNavigate } from \"react-router-dom\";\n// export default function CountdownTimer({initialTime, isDarkMode }) {\n//   const [time, setTime] = useState(0);\n//   const [isRunning, setIsRunning] = useState(true);\n//   //const [inputTime, setInputTime] = useState(\"\");\n//   const navigate = useNavigate();\n//   useEffect(() => {\n//     let interval;\n//     if (isRunning && time > 0) {\n//       interval = setInterval(() => {\n//         setTime((prevTime) => prevTime - 1);\n//       }, 1000);\n//     } else {\n//       clearInterval(interval);\n//       if (isRunning && time === 0) {\n//         // Timer reached zero, send email\n//         const sendEmail = async () => {\n//           try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.post(\n//               \"http://localhost:5000/api/email/send-email\",\n//               {},\n//               {\n//                 headers: {\n//                   Authorization: `Bearer ${token}`,\n//                 },\n//               }\n//             );\n//             console.log(\"Email sent successfully!\");\n//           } catch (error) {\n//             console.error(\"Error sending email:\", error);\n//             if(error.response && error.response.data && error.response.data.error){\n//                 console.error(\"Server error message:\", error.response.data.error);\n//             }\n//           }\n//         };\n//         sendEmail();\n//         setIsRunning(false);\n//         navigate(\"/user-photos\"); // Stop the timer\n//       }\n//     }\n//     return () => clearInterval(interval);\n//   }, [isRunning, time,navigate]);\n//   useEffect(() => {\n//     if (initialTime > 0) { // Only reset if initialTime is greater than 0\n//         setTime(initialTime);\n//         setIsRunning(true);\n//     }\n// }, [initialTime]);\n\n//   const formatTime = (seconds) => {\n//     const years = Math.floor(seconds / 31536000);\n//     const months = Math.floor((seconds % 31536000) / 2592000);\n//     const days = Math.floor((seconds % 2592000) / 86400);\n//     const hours = Math.floor((seconds % 86400) / 3600);\n//     const minutes = Math.floor((seconds % 3600) / 60);\n//     const remainingSeconds = seconds % 60;\n\n//     if (years > 0) return `${years}y ${months}m`;\n//     if (months > 0) return `${months}m ${days}d`;\n//     if (days > 0) return `${days}d ${hours}h`;\n//     if (hours > 0) return `${hours}h ${minutes}m`;\n//     return `${minutes}m ${remainingSeconds}s`;\n//   };\n\n//   /*const handleStart = () => {\n//     const seconds = parseInt(inputTime, 10);\n//     if (!isNaN(seconds) && seconds > 0) {\n//       setTime(seconds);\n//       setIsRunning(true);\n//     }\n//   };*/\n\n//   return (\n//     <div className={isDarkMode ? \"dark-mode\" : \"light-mode\"}>\n//         <div className=\"timer\">{formatTime(time)}</div>\n//         <div className=\"button-container\">\n//             <button onClick={() => setIsRunning(false)} className=\"button\">\n//                 Stop\n//             </button>\n//             <button\n//                 onClick={() => {\n//                     setTime(initialTime); // Reset to initialTime\n//                     setIsRunning(true);\n//                 }}\n//                 className=\"button\"\n//             >\n//                 Reset\n//             </button>\n//         </div>\n//     </div>\n// );\n// }\n\n\n\n\n\n// import { useState, useEffect } from \"react\";\n// import { useNavigate, useLocation } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"./CountdownTimer.css\";\n\n// export default function CountdownTimer() {\n//     const navigate = useNavigate();\n//     const location = useLocation();\n//     const queryParams = new URLSearchParams(location.search);\n//     const initialTime = parseInt(queryParams.get(\"time\"), 10) || 0; // Read time from URL\n\n//     const [time, setTime] = useState(initialTime);\n//     const [isRunning, setIsRunning] = useState(true);\n\n//     useEffect(() => {\n//         let interval;\n//         if (isRunning && time > 0) {\n//             interval = setInterval(() => {\n//                 setTime((prevTime) => prevTime - 1);\n//             }, 1000);\n//         } else {\n//             clearInterval(interval);\n//             if (isRunning && time === 0) {\n//                 sendEmail();\n//                 setIsRunning(false);\n//                 navigate(\"/user-photos\"); // Redirect when timer ends\n//             }\n//         }\n//         return () => clearInterval(interval);\n//     }, [isRunning, time, navigate]);\n\n//     const sendEmail = async () => {\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.post(\n//                 \"http://localhost:5000/api/email/send-email\",\n//                 {},\n//                 {\n//                     headers: {\n//                         Authorization: `Bearer ${token}`,\n//                     },\n//                 }\n//             );\n//             console.log(\"Email sent successfully!\");\n//         } catch (error) {\n//             console.error(\"Error sending email:\", error);\n//         }\n//     };\n\n//     return (\n//         <div className=\"timer-container\">\n//             <div className=\"timer\">{time}s</div>\n//             <button onClick={() => setIsRunning(false)}>Stop</button>\n//             <button onClick={() => { setTime(initialTime); setIsRunning(true); }}>Reset</button>\n//         </div>\n//     );\n// }\n\n\n\n\n\n\nimport { useState, useEffect } from \"react\";\nimport \"./CountdownTimer.css\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function CountdownTimer({ initialTime = 0, isDarkMode }) {\n    const [time, setTime] = useState(initialTime);\n    const [isRunning, setIsRunning] = useState(true);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        if (initialTime > 0) {\n            setTime(initialTime); // Set time from props when component mounts\n            setIsRunning(true);\n        }\n    }, [initialTime]);\n\n    useEffect(() => {\n        let interval;\n        if (isRunning && time > 0) {\n            interval = setInterval(() => {\n                setTime((prevTime) => prevTime - 1);\n            }, 1000);\n        } else {\n            clearInterval(interval);\n            if (isRunning && time === 0) {\n                sendEmail(); // Send email when timer hits zero\n                setIsRunning(false);\n                navigate(\"/user-photos\"); // Redirect after timer ends\n            }\n        }\n        return () => clearInterval(interval);\n    }, [isRunning, time, navigate]);\n\n    const sendEmail = async () => {\n        try {\n            const token = localStorage.getItem(\"token\");\n            await axios.post(\n                \"http://localhost:5000/api/email/send-email\",\n                {},\n                {\n                    headers: {\n                        Authorization: `Bearer ${token}`,\n                    },\n                }\n            );\n            console.log(\"Email sent successfully!\");\n        } catch (error) {\n            console.error(\"Error sending email:\", error);\n        }\n    };\n\n    const formatTime = (seconds) => {\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes}m ${remainingSeconds}s`;\n    };\n\n    return (\n        <div className={isDarkMode ? \"dark-mode\" : \"light-mode\"}>\n            <div className=\"timer\">{formatTime(time)}</div>\n            <div className=\"button-container\">\n                <button onClick={() => setIsRunning(false)} className=\"button\">\n                    Stop\n                </button>\n                <button\n                    onClick={() => {\n                        setTime(initialTime); // Reset to initial time\n                        setIsRunning(true);\n                    }}\n                    className=\"button\"\n                >\n                    Reset\n                </button>\n            </div>\n        </div>\n    );\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAO,sBAAsB;AAC7B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,eAAe,SAASC,cAAcA,CAAC;EAAEC,WAAW,GAAG,CAAC;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EACpE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAACO,WAAW,CAAC;EAC7C,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAMc,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACZ,IAAIM,WAAW,GAAG,CAAC,EAAE;MACjBI,OAAO,CAACJ,WAAW,CAAC,CAAC,CAAC;MACtBM,YAAY,CAAC,IAAI,CAAC;IACtB;EACJ,CAAC,EAAE,CAACN,WAAW,CAAC,CAAC;EAEjBN,SAAS,CAAC,MAAM;IACZ,IAAIc,QAAQ;IACZ,IAAIH,SAAS,IAAIF,IAAI,GAAG,CAAC,EAAE;MACvBK,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACzBL,OAAO,CAAEM,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAC;MACvC,CAAC,EAAE,IAAI,CAAC;IACZ,CAAC,MAAM;MACHC,aAAa,CAACH,QAAQ,CAAC;MACvB,IAAIH,SAAS,IAAIF,IAAI,KAAK,CAAC,EAAE;QACzBS,SAAS,CAAC,CAAC,CAAC,CAAC;QACbN,YAAY,CAAC,KAAK,CAAC;QACnBC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC;MAC9B;IACJ;IACA,OAAO,MAAMI,aAAa,CAACH,QAAQ,CAAC;EACxC,CAAC,EAAE,CAACH,SAAS,EAAEF,IAAI,EAAEI,QAAQ,CAAC,CAAC;EAE/B,MAAMK,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMpB,KAAK,CAACqB,IAAI,CACZ,4CAA4C,EAC5C,CAAC,CAAC,EACF;QACIC,OAAO,EAAE;UACLC,aAAa,EAAE,UAAUL,KAAK;QAClC;MACJ,CACJ,CAAC;MACDM,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED,MAAMC,UAAU,GAAIC,OAAO,IAAK;IAC5B,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,EAAE,CAAC;IACxC,MAAMI,gBAAgB,GAAGJ,OAAO,GAAG,EAAE;IACrC,OAAO,GAAGC,OAAO,KAAKG,gBAAgB,GAAG;EAC7C,CAAC;EAED,oBACI7B,OAAA;IAAK8B,SAAS,EAAE3B,UAAU,GAAG,WAAW,GAAG,YAAa;IAAA4B,QAAA,gBACpD/B,OAAA;MAAK8B,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEP,UAAU,CAACnB,IAAI;IAAC;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC/CnC,OAAA;MAAK8B,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC7B/B,OAAA;QAAQoC,OAAO,EAAEA,CAAA,KAAM5B,YAAY,CAAC,KAAK,CAAE;QAACsB,SAAS,EAAC,QAAQ;QAAAC,QAAA,EAAC;MAE/D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTnC,OAAA;QACIoC,OAAO,EAAEA,CAAA,KAAM;UACX9B,OAAO,CAACJ,WAAW,CAAC,CAAC,CAAC;UACtBM,YAAY,CAAC,IAAI,CAAC;QACtB,CAAE;QACFsB,SAAS,EAAC,QAAQ;QAAAC,QAAA,EACrB;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAC/B,EAAA,CAxEuBH,cAAc;EAAA,QAGjBH,WAAW;AAAA;AAAAuC,EAAA,GAHRpC,cAAc;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}