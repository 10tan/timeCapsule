{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n// import \"./CountdownTimer.css\";\n// import axios from \"axios\"\n// import { useNavigate } from \"react-router-dom\";\n// export default function CountdownTimer({initialTime, isDarkMode }) {\n//   const [time, setTime] = useState(0);\n//   const [isRunning, setIsRunning] = useState(true);\n//   //const [inputTime, setInputTime] = useState(\"\");\n//   const navigate = useNavigate();\n//   useEffect(() => {\n//     let interval;\n//     if (isRunning && time > 0) {\n//       interval = setInterval(() => {\n//         setTime((prevTime) => prevTime - 1);\n//       }, 1000);\n//     } else {\n//       clearInterval(interval);\n//       if (isRunning && time === 0) {\n//         // Timer reached zero, send email\n//         const sendEmail = async () => {\n//           try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.post(\n//               \"http://localhost:5000/api/email/send-email\",\n//               {},\n//               {\n//                 headers: {\n//                   Authorization: `Bearer ${token}`,\n//                 },\n//               }\n//             );\n//             console.log(\"Email sent successfully!\");\n//           } catch (error) {\n//             console.error(\"Error sending email:\", error);\n//             if(error.response && error.response.data && error.response.data.error){\n//                 console.error(\"Server error message:\", error.response.data.error);\n//             }\n//           }\n//         };\n//         sendEmail();\n//         setIsRunning(false);\n//         navigate(\"/user-photos\"); // Stop the timer\n//       }\n//     }\n//     return () => clearInterval(interval);\n//   }, [isRunning, time,navigate]);\n//   useEffect(() => {\n//     if (initialTime > 0) { // Only reset if initialTime is greater than 0\n//         setTime(initialTime);\n//         setIsRunning(true);\n//     }\n// }, [initialTime]);\n\n//   const formatTime = (seconds) => {\n//     const years = Math.floor(seconds / 31536000);\n//     const months = Math.floor((seconds % 31536000) / 2592000);\n//     const days = Math.floor((seconds % 2592000) / 86400);\n//     const hours = Math.floor((seconds % 86400) / 3600);\n//     const minutes = Math.floor((seconds % 3600) / 60);\n//     const remainingSeconds = seconds % 60;\n\n//     if (years > 0) return `${years}y ${months}m`;\n//     if (months > 0) return `${months}m ${days}d`;\n//     if (days > 0) return `${days}d ${hours}h`;\n//     if (hours > 0) return `${hours}h ${minutes}m`;\n//     return `${minutes}m ${remainingSeconds}s`;\n//   };\n\n//   /*const handleStart = () => {\n//     const seconds = parseInt(inputTime, 10);\n//     if (!isNaN(seconds) && seconds > 0) {\n//       setTime(seconds);\n//       setIsRunning(true);\n//     }\n//   };*/\n\n//   return (\n//     <div className={isDarkMode ? \"dark-mode\" : \"light-mode\"}>\n//         <div className=\"timer\">{formatTime(time)}</div>\n//         <div className=\"button-container\">\n//             <button onClick={() => setIsRunning(false)} className=\"button\">\n//                 Stop\n//             </button>\n//             <button\n//                 onClick={() => {\n//                     setTime(initialTime); // Reset to initialTime\n//                     setIsRunning(true);\n//                 }}\n//                 className=\"button\"\n//             >\n//                 Reset\n//             </button>\n//         </div>\n//     </div>\n// );\n// }","map":{"version":3,"names":[],"sources":["/home/tanmay-kumar/Desktop/clone-2/timeCapsule/src/Dashboard/Timer.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n// import \"./CountdownTimer.css\";\n// import axios from \"axios\"\n// import { useNavigate } from \"react-router-dom\";\n// export default function CountdownTimer({initialTime, isDarkMode }) {\n//   const [time, setTime] = useState(0);\n//   const [isRunning, setIsRunning] = useState(true);\n//   //const [inputTime, setInputTime] = useState(\"\");\n//   const navigate = useNavigate();\n//   useEffect(() => {\n//     let interval;\n//     if (isRunning && time > 0) {\n//       interval = setInterval(() => {\n//         setTime((prevTime) => prevTime - 1);\n//       }, 1000);\n//     } else {\n//       clearInterval(interval);\n//       if (isRunning && time === 0) {\n//         // Timer reached zero, send email\n//         const sendEmail = async () => {\n//           try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.post(\n//               \"http://localhost:5000/api/email/send-email\",\n//               {},\n//               {\n//                 headers: {\n//                   Authorization: `Bearer ${token}`,\n//                 },\n//               }\n//             );\n//             console.log(\"Email sent successfully!\");\n//           } catch (error) {\n//             console.error(\"Error sending email:\", error);\n//             if(error.response && error.response.data && error.response.data.error){\n//                 console.error(\"Server error message:\", error.response.data.error);\n//             }\n//           }\n//         };\n//         sendEmail();\n//         setIsRunning(false);\n//         navigate(\"/user-photos\"); // Stop the timer\n//       }\n//     }\n//     return () => clearInterval(interval);\n//   }, [isRunning, time,navigate]);\n//   useEffect(() => {\n//     if (initialTime > 0) { // Only reset if initialTime is greater than 0\n//         setTime(initialTime);\n//         setIsRunning(true);\n//     }\n// }, [initialTime]);\n\n//   const formatTime = (seconds) => {\n//     const years = Math.floor(seconds / 31536000);\n//     const months = Math.floor((seconds % 31536000) / 2592000);\n//     const days = Math.floor((seconds % 2592000) / 86400);\n//     const hours = Math.floor((seconds % 86400) / 3600);\n//     const minutes = Math.floor((seconds % 3600) / 60);\n//     const remainingSeconds = seconds % 60;\n\n//     if (years > 0) return `${years}y ${months}m`;\n//     if (months > 0) return `${months}m ${days}d`;\n//     if (days > 0) return `${days}d ${hours}h`;\n//     if (hours > 0) return `${hours}h ${minutes}m`;\n//     return `${minutes}m ${remainingSeconds}s`;\n//   };\n\n//   /*const handleStart = () => {\n//     const seconds = parseInt(inputTime, 10);\n//     if (!isNaN(seconds) && seconds > 0) {\n//       setTime(seconds);\n//       setIsRunning(true);\n//     }\n//   };*/\n\n//   return (\n//     <div className={isDarkMode ? \"dark-mode\" : \"light-mode\"}>\n//         <div className=\"timer\">{formatTime(time)}</div>\n//         <div className=\"button-container\">\n//             <button onClick={() => setIsRunning(false)} className=\"button\">\n//                 Stop\n//             </button>\n//             <button\n//                 onClick={() => {\n//                     setTime(initialTime); // Reset to initialTime\n//                     setIsRunning(true);\n//                 }}\n//                 className=\"button\"\n//             >\n//                 Reset\n//             </button>\n//         </div>\n//     </div>\n// );\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}