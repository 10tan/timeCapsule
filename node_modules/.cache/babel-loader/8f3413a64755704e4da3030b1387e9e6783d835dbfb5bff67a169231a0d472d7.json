{"ast":null,"code":"const express = require('express');\nconst router = express.Router(); // ✅ Use Router instead of app\nconst multer = require('multer');\nconst cloudinary = require('cloudinary').v2;\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/user');\nrouter.use(express.json());\n\n// ✅ Cloudinary Configuration\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME || 'dqf7rai71',\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n  secure: true\n});\n\n// ✅ Multer Storage (Memory Storage)\nconst storage = multer.memoryStorage();\nconst upload = multer({\n  storage\n});\n\n// ✅ Image Upload Route\nrouter.post('/', upload.single('image'), async (req, res) => {\n  try {\n    var _req$headers$authoriz;\n    const token = (_req$headers$authoriz = req.headers.authorization) === null || _req$headers$authoriz === void 0 ? void 0 : _req$headers$authoriz.split(' ')[1];\n    if (!token) return res.status(401).json({\n      message: 'Unauthorized'\n    });\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const userId = decoded.id;\n    if (!req.file) return res.status(400).json({\n      message: 'No file uploaded'\n    });\n\n    // ✅ Upload File to Cloudinary\n    const result = await new Promise((resolve, reject) => {\n      const uploadStream = cloudinary.uploader.upload_stream({\n        folder: `user_uploads/${userId}`,\n        resource_type: 'auto',\n        public_id: `${Date.now()}-${req.file.originalname.split('.')[0]}`\n      }, (error, result) => error ? reject(error) : resolve(result));\n      uploadStream.end(req.file.buffer);\n    });\n\n    // ✅ Update User Schema\n    const updatedUser = await User.findByIdAndUpdate(userId, {\n      imgurl: result.secure_url\n    }, {\n      new: true\n    });\n    res.status(200).json({\n      message: 'Upload successful',\n      imageUrl: updatedUser.imgurl\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: error.message\n    });\n  }\n});\nmodule.exports = router; // ✅ Export Router","map":{"version":3,"names":["express","require","router","Router","multer","cloudinary","v2","jwt","User","use","json","config","cloud_name","process","env","CLOUDINARY_CLOUD_NAME","api_key","CLOUDINARY_API_KEY","api_secret","CLOUDINARY_API_SECRET","secure","storage","memoryStorage","upload","post","single","req","res","_req$headers$authoriz","token","headers","authorization","split","status","message","decoded","verify","JWT_SECRET","userId","id","file","result","Promise","resolve","reject","uploadStream","uploader","upload_stream","folder","resource_type","public_id","Date","now","originalname","error","end","buffer","updatedUser","findByIdAndUpdate","imgurl","secure_url","new","imageUrl","module","exports"],"sources":["/home/tanmay-kumar/Desktop/clone-2/timeCapsule/src/Dashboard/user-photos.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router(); // ✅ Use Router instead of app\nconst multer = require('multer');\nconst cloudinary = require('cloudinary').v2;\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/user');\n\nrouter.use(express.json());\n\n// ✅ Cloudinary Configuration\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME || 'dqf7rai71',\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n  secure: true,\n});\n\n// ✅ Multer Storage (Memory Storage)\nconst storage = multer.memoryStorage();\nconst upload = multer({ storage });\n\n// ✅ Image Upload Route\nrouter.post('/', upload.single('image'), async (req, res) => {\n  try {\n    const token = req.headers.authorization?.split(' ')[1];\n    if (!token) return res.status(401).json({ message: 'Unauthorized' });\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const userId = decoded.id;\n\n    if (!req.file) return res.status(400).json({ message: 'No file uploaded' });\n\n    // ✅ Upload File to Cloudinary\n    const result = await new Promise((resolve, reject) => {\n      const uploadStream = cloudinary.uploader.upload_stream(\n        {\n          folder: `user_uploads/${userId}`,\n          resource_type: 'auto',\n          public_id: `${Date.now()}-${req.file.originalname.split('.')[0]}`,\n        },\n        (error, result) => (error ? reject(error) : resolve(result))\n      );\n      uploadStream.end(req.file.buffer);\n    });\n\n    // ✅ Update User Schema\n    const updatedUser = await User.findByIdAndUpdate(\n      userId,\n      { imgurl: result.secure_url },\n      { new: true }\n    );\n\n    res.status(200).json({ message: 'Upload successful', imageUrl: updatedUser.imgurl });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\nmodule.exports = router; // ✅ Export Router\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}